/*
Copyright 2022 Max T.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthenticatedOriginPullsCertificateObservation struct {
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	UploadedOn *string `json:"uploadedOn,omitempty" tf:"uploaded_on,omitempty"`
}

type AuthenticatedOriginPullsCertificateParameters struct {

	// +kubebuilder:validation:Required
	CertificateSecretRef v1.SecretKeySelector `json:"certificateSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	PrivateKeySecretRef v1.SecretKeySelector `json:"privateKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +crossplane:generate:reference:type=Zone
	// +crossplane:generate:reference:refFieldName=ZoneRef
	// +crossplane:generate:reference:selectorFieldName=ZoneSelector
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneRef *v1.Reference `json:"zoneRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneSelector *v1.Selector `json:"zoneSelector,omitempty" tf:"-"`
}

// AuthenticatedOriginPullsCertificateSpec defines the desired state of AuthenticatedOriginPullsCertificate
type AuthenticatedOriginPullsCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthenticatedOriginPullsCertificateParameters `json:"forProvider"`
}

// AuthenticatedOriginPullsCertificateStatus defines the observed state of AuthenticatedOriginPullsCertificate.
type AuthenticatedOriginPullsCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthenticatedOriginPullsCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthenticatedOriginPullsCertificate is the Schema for the AuthenticatedOriginPullsCertificates API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudflare}
type AuthenticatedOriginPullsCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthenticatedOriginPullsCertificateSpec   `json:"spec"`
	Status            AuthenticatedOriginPullsCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthenticatedOriginPullsCertificateList contains a list of AuthenticatedOriginPullsCertificates
type AuthenticatedOriginPullsCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthenticatedOriginPullsCertificate `json:"items"`
}

// Repository type metadata.
var (
	AuthenticatedOriginPullsCertificate_Kind             = "AuthenticatedOriginPullsCertificate"
	AuthenticatedOriginPullsCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthenticatedOriginPullsCertificate_Kind}.String()
	AuthenticatedOriginPullsCertificate_KindAPIVersion   = AuthenticatedOriginPullsCertificate_Kind + "." + CRDGroupVersion.String()
	AuthenticatedOriginPullsCertificate_GroupVersionKind = CRDGroupVersion.WithKind(AuthenticatedOriginPullsCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthenticatedOriginPullsCertificate{}, &AuthenticatedOriginPullsCertificateList{})
}
